{
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(10);\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(10);\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(10);\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData;\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData;\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_45_goodG2BData;\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41_goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(10);\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(10);\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(10);\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[10] = {0};\n      memcpy(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[10] = {0};\n      memcpy(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[10] = {0};\n      memcpy(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[10] = {0};\n      memcpy(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[10] = {0};\n      memcpy(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[10] = {0};\n      memcpy(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memcpy(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_61a.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_13.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61a.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_53d.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      strcpy(data, source);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData;\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData;\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45_goodG2BData;\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_07.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_54e.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(10);\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(10);\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(10);\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_03.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_09.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45_goodG2BData;\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_10.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68a.c": {
        "error": "'data'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      size_t i;\n      size_t sourceLen;\n      sourceLen = strlen(source);\n      for (i = 0; i < (sourceLen + 1); i++)\n      {\n        data[i] = source[i];\n      }\n\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      size_t i;\n      size_t sourceLen;\n      sourceLen = strlen(source);\n      for (i = 0; i < (sourceLen + 1); i++)\n      {\n        data[i] = source[i];\n      }\n\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68a.c": {
        "error": "'data'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68a.c": {
        "error": "'data'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68a.c": {
        "error": "'data'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_51b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41_goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_14.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(10);\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(10);\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(10);\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[10] = {0};\n      memmove(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[10] = {0};\n      memmove(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[10] = {0};\n      memmove(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 13
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_67b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      size_t i;\n      size_t sourceLen;\n      sourceLen = strlen(source);\n      for (i = 0; i < (sourceLen + 1); i++)\n      {\n        data[i] = source[i];\n      }\n\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      size_t i;\n      size_t sourceLen;\n      sourceLen = strlen(source);\n      for (i = 0; i < (sourceLen + 1); i++)\n      {\n        data[i] = source[i];\n      }\n\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_05.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[10] = {0};\n      memmove(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[10] = {0};\n      memmove(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(10);\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[10] = {0};\n      memmove(data, source, 10 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_45.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      strcpy(data, source);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61a.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61a.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61a.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (40 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (40 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(10);\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[10] = {0};\n    memmove(data, source, 10 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64a.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45_goodG2BData;\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad",
                "description": "Increase size of array `data`(10) to account for loop access (atleast 11)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad",
                "description": "Decrease loop upper bound (11) to stay within the bounds of the array `data` (at most 10)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    size_t i;\n    size_t sourceLen;\n    sourceLen = strlen(source);\n    for (i = 0; i < (sourceLen + 1); i++)\n    {\n      data[i] = source[i];\n    }\n\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memcpy(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61a.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05.c": {
        "error": "'ID' object has no attribute 'type'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_02.c": {
        "error": "unsupported operand type(s) for +: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06.c": {
        "error": "local variable 'variable_name' referenced before assignment",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memcpy(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memcpy(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memcpy(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_02_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_02_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_08_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_08_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_45_goodG2BData;\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_45_goodG2BData;\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_45_goodG2BData;\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 19
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memmove(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memmove(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memmove(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(10 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_45_goodG2BData;\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_45_goodG2BData;\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_45_goodG2BData;\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41_goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41_goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41_goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_05_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_05_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(10 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_15_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_15_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_45_goodG2BData;\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_45_goodG2BData;\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_45_goodG2BData;\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      size_t i;\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      size_t i;\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 19
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_31_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      size_t i;\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_31_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      size_t i;\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(10 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[10 + 1] = \"AAAAAAAAAA\";\n      memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_10_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_10_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_45_goodG2BData;\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_45_goodG2BData;\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_45_goodG2BData;\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_09_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_09_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_03_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_03_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_07_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_07_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41_goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41_goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41_goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memcpy(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memcpy(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memcpy(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_17_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_17_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 19
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_45_goodG2BData;\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_45_goodG2BData;\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_45_goodG2BData;\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 10 bytes to be at least 11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (11 bytes to not be larger than the destination buffer 'data' (10 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (10 units of 1 bytes) to be able to hold coppied size 'data' (11 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(10 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    char source[10 + 1] = \"AAAAAAAAAA\";\n    memmove(data, source, (strlen(source) + 1) * (sizeof(char)));\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memmove(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memmove(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      memmove(data, source, 100 * (sizeof(char)));\n      data[100 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n    memcpy(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 20 bytes to be at least 22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (22 bytes to not be larger than the destination buffer 'data' (20 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (20 units of 1 bytes) to be able to hold coppied size 'data' (22 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(10 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[10 + 1] = L\"AAAAAAAAAA\";\n      memmove(data, source, (wcslen(source) + 1) * (sizeof(wchar_t)));\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memmove(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    memcpy(data, source, 100 * (sizeof(char)));\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_13_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_13_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    size_t i;\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    for (i = 0; i < 100; i++)\n    {\n      data[i] = source[i];\n    }\n\n    data[100 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_10_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_10_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41_goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41_goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41_goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15_bad()\n{\n  int64_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15_bad()\n{\n  int64_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15_bad()\n{\n  int64_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_bad()\n{\n  int64_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int64_t *data = myUnion.unionSecond;\n    {\n      int64_t source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_bad()\n{\n  int64_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int64_t *data = myUnion.unionSecond;\n    {\n      int64_t source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_bad()\n{\n  int64_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int64_t *data = myUnion.unionSecond;\n    {\n      int64_t source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memcpy(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memcpy(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memcpy(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_31_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          data[i] = source[i];\n        }\n\n        printStructLine(&data[0]);\n        free(data);\n      }\n    }\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_31_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          data[i] = source[i];\n        }\n\n        printStructLine(&data[0]);\n        free(data);\n      }\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(50 * (sizeof(int)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(50 * (sizeof(int)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(50 * (sizeof(int)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_45_goodG2BData;\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_45_goodG2BData;\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_45_goodG2BData;\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_14_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_14_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t *dataCopy = data;\n    int64_t *data = dataCopy;\n    {\n      int64_t source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t *dataCopy = data;\n    int64_t *data = dataCopy;\n    {\n      int64_t source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t *dataCopy = data;\n    int64_t *data = dataCopy;\n    {\n      int64_t source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_45_goodG2BData;\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_45_goodG2BData;\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_45_goodG2BData;\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11_bad()\n{\n  int *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "static void goodG2BSink()\n{\n  int64_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_45_goodG2BData;\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "static void goodG2BSink()\n{\n  int64_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_45_goodG2BData;\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "static void goodG2BSink()\n{\n  int64_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_45_goodG2BData;\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 22
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 22
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 22
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41_goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41_goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41_goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05_bad()\n{\n  int *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_04_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_04_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_bad()\n{\n  int *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int *data = myUnion.unionSecond;\n    {\n      int source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "static void goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "static void goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "static void goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41_goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41_goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41_goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(50 * (sizeof(int)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(50 * (sizeof(int)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15_bad()\n{\n  int *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int *) malloc(50 * (sizeof(int)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_45_goodG2BData;\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_45_goodG2BData;\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "static void goodG2BSink()\n{\n  int *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_45_goodG2BData;\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(50 * (sizeof(int)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(50 * (sizeof(int)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(50 * (sizeof(int)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41_goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41_goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41_goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_13_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_13_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16_bad()\n{\n  int64_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16_bad()\n{\n  int64_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16_bad()\n{\n  int64_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  twoIntsStruct *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_45_goodG2BData;\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink()\n{\n  twoIntsStruct *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_45_goodG2BData;\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink()\n{\n  twoIntsStruct *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_45_goodG2BData;\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_17_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_17_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 26
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18_bad()\n{\n  int64_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18_bad()\n{\n  int64_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18_bad()\n{\n  int64_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17_bad()\n{\n  int i;\n  int64_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17_bad()\n{\n  int i;\n  int64_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17_bad()\n{\n  int i;\n  int64_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_07_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_07_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(50 * (sizeof(int)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(50 * (sizeof(int)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18_bad()\n{\n  int *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int *) malloc(50 * (sizeof(int)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16_bad()\n{\n  int *data;\n  data = 0;\n  while (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 29
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 29
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 29
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08_bad()\n{\n  int *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_03_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_03_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_09_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_09_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02_bad()\n{\n  int *data;\n  data = 0;\n  if (1)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18_bad()\n{\n  int64_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18_bad()\n{\n  int64_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18_bad()\n{\n  int64_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 13
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41_goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41_goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41_goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_bad()\n{\n  int i;\n  int64_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_bad()\n{\n  int i;\n  int64_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17_bad()\n{\n  int i;\n  int64_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_66b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_18_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_18_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 26
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink(twoIntsStruct *data)\n{\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  twoIntsStruct *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_45_goodG2BData;\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "static void goodG2BSink()\n{\n  twoIntsStruct *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_45_goodG2BData;\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "static void goodG2BSink()\n{\n  twoIntsStruct *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_45_goodG2BData;\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad()\n{\n  int64_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad()\n{\n  int64_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16_bad()\n{\n  int64_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_06_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_06_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07_bad()\n{\n  int *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_63b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53d.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54e.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_61a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17_bad()\n{\n  int i;\n  int *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_67b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_08_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_08_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03_bad()\n{\n  int *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 29
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 29
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 29
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct *dataCopy = data;\n    twoIntsStruct *data = dataCopy;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09_bad()\n{\n  int *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_bad()\n{\n  int64_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int64_t *data = myUnion.unionSecond;\n    {\n      int64_t source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_bad()\n{\n  int64_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int64_t *data = myUnion.unionSecond;\n    {\n      int64_t source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_bad()\n{\n  int64_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34_unionType myUnion;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    int64_t *data = myUnion.unionSecond;\n    {\n      int64_t source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t *dataCopy = data;\n    int64_t *data = dataCopy;\n    {\n      int64_t source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t *dataCopy = data;\n    int64_t *data = dataCopy;\n    {\n      int64_t source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t *dataCopy = data;\n    int64_t *data = dataCopy;\n    {\n      int64_t source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int64_t)));\n      printLongLongLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          data[i] = source[i];\n        }\n\n        printStructLine(&data[0]);\n        free(data);\n      }\n    }\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_bad()\n{\n  twoIntsStruct *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34_unionType myUnion;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  myUnion.unionFirst = data;\n  {\n    twoIntsStruct *data = myUnion.unionSecond;\n    {\n      twoIntsStruct source[100];\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          source[i].intOne = 0;\n          source[i].intTwo = 0;\n        }\n\n      }\n      {\n        size_t i;\n        for (i = 0; i < 100; i++)\n        {\n          data[i] = source[i];\n        }\n\n        printStructLine(&data[0]);\n        free(data);\n      }\n    }\n  }\n}\n\n",
                "line": 26
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memcpy(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memcpy(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memcpy(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad()\n{\n  int64_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad()\n{\n  int64_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15_bad()\n{\n  int64_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 20
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[100] = {0};\n      memmove(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_21.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 31
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "static void goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "static void goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "static void goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10_bad()\n{\n  int *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_41.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_42.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 22
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 22
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  goto source;\n  source:\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 22
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_05_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_05_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_05_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 25
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41_goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41_goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41_goodG2BSink(int64_t *data)\n{\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_22a.c": {
        "error": "'int' object has no attribute 'coord'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04_bad()\n{\n  int *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_51b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_64b.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04_bad()\n{\n  int64_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int64_t source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "static void goodG2BSink()\n{\n  int64_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_goodG2BData;\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "static void goodG2BSink()\n{\n  int64_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_goodG2BData;\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "static void goodG2BSink()\n{\n  int64_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45_goodG2BData;\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  while (1)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    break;\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memmove(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04_bad",
                "description": "Reduce the number of bytes coppied in memcpy (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04_bad",
                "description": "Increase the size of the destination buffer in memcpy (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memcpy(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31_bad()\n{\n  int *data;\n  data = 0;\n  data = (int *) malloc(50 * (sizeof(int)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int *dataCopy = data;\n    int *data = dataCopy;\n    {\n      int source[100] = {0};\n      memcpy(data, source, 100 * (sizeof(int)));\n      printIntLine(data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_01_bad",
                "description": "Increase size of array `data`(50) to account for loop access (atleast 100)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_01_bad",
                "description": "Decrease loop upper bound (100) to stay within the bounds of the array `data` (at most 50)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_01_bad()\n{\n  twoIntsStruct *data;\n  data = 0;\n  data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        data[i] = source[i];\n      }\n\n      printStructLine(&data[0]);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 22
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17_bad",
                "description": "Reduce the number of bytes coppied in memcpy (100 bytes to not be larger than the destination buffer 'data' (50 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17_bad",
                "description": "Increase the size of the destination buffer in memcpy (50 units of 1 bytes) to be able to hold coppied size 'data' (100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17_bad()\n{\n  int i;\n  twoIntsStruct *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (twoIntsStruct *) malloc(50 * (sizeof(twoIntsStruct)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n\n  {\n    twoIntsStruct source[100];\n    {\n      size_t i;\n      for (i = 0; i < 100; i++)\n      {\n        source[i].intOne = 0;\n        source[i].intTwo = 0;\n      }\n\n    }\n    memcpy(data, source, 100 * (sizeof(twoIntsStruct)));\n    printStructLine(&data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 24
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "static void goodG2BSink(int *data)\n{\n  {\n    int source[100] = {0};\n    memmove(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 200 bytes to be at least 400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14_bad",
                "description": "Reduce the number of bytes coppied in memcpy (400 bytes to not be larger than the destination buffer 'data' (200 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14_bad",
                "description": "Increase the size of the destination buffer in memcpy (200 units of 1 bytes) to be able to hold coppied size 'data' (400 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14_bad()\n{\n  int *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (int *) malloc(50 * (sizeof(int)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n  }\n  {\n    int source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int)));\n    printIntLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 400 bytes to be at least 800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01_bad",
                "description": "Reduce the number of bytes coppied in memcpy (800 bytes to not be larger than the destination buffer 'data' (400 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01_bad",
                "description": "Increase the size of the destination buffer in memcpy (400 units of 1 bytes) to be able to hold coppied size 'data' (800 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01_bad()\n{\n  int64_t *data;\n  data = 0;\n  data = (int64_t *) malloc(50 * (sizeof(int64_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  {\n    int64_t source[100] = {0};\n    memcpy(data, source, 100 * (sizeof(int64_t)));\n    printLongLongLine(data[0]);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_52c.c": {
        "error": "unsupported operand type(s) for //: 'NoneType' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_11_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_34_unionType myUnion;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 100 - 1);\n  data[100 - 1] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t dest[50] = L\"\";\n      memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_34_unionType myUnion;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 50 - 1);\n  data[50 - 1] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t dest[50] = L\"\";\n      memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_17_bad()\n{\n  int i;\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (i = 0; i < 1; i++)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  int h;\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (h = 0; h < 1; h++)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_34_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_34_unionType myUnion;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char dest[50] = \"\";\n      memcpy(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_34_unionType myUnion;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char dest[50] = \"\";\n      memcpy(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_badGlobal = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_goodG2B1Global = 0;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_goodG2B1Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_goodG2B2Global = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22_goodG2B2Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_13_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_44.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      memset(data, 'A', 100 - 1);\n      data[100 - 1] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (5)\n  {\n    case 6:\n      printLine(\"Benign, fixed string\");\n      break;\n\n    default:\n      memset(data, 'A', 50 - 1);\n      data[50 - 1] = '\\0';\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      memset(data, 'A', 50 - 1);\n      data[50 - 1] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_badGlobal = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_badSource(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_goodG2B1Global = 0;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_goodG2B1Source(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_goodG2B2Global = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22_goodG2B2Source(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_15_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_15_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      wmemset(data, L'A', 100 - 1);\n      data[100 - 1] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (5)\n  {\n    case 6:\n      printLine(\"Benign, fixed string\");\n      break;\n\n    default:\n      wmemset(data, L'A', 50 - 1);\n      data[50 - 1] = L'\\0';\n      break;\n\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      wmemset(data, L'A', 50 - 1);\n      data[50 - 1] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_41.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_09_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18_bad()\n{\n  wchar_t *data;\n  data = 0;\n  goto source;\n  source:\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_41.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_05_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_05_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_05_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_01_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 100 - 1);\n  data[100 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 50 - 1);\n  data[50 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_01_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_01_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_45_goodG2BData;\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16_bad()\n{\n  wchar_t *data;\n  data = 0;\n  while (1)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_45_goodG2BData;\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  memset(data, 'A', 100 - 1);\n\n  data[100 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  memset(data, 'A', 50 - 1);\n\n  data[50 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_31_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char dest[50] = \"\";\n      memmove(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char dest[50] = \"\";\n      memmove(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41_goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41_goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41_goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_12.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_12_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_12_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_18_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_18_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  wmemset(data, L'A', 100 - 1);\n\n  data[100 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  wmemset(data, L'A', 50 - 1);\n\n  data[50 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n    break;\n  }\n\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n    break;\n  }\n\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_16_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_16_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_45_goodG2BData;\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_45_goodG2BData;\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_45_goodG2BData;\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_10_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_44.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_06_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memmove(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memmove(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34_unionType myUnion;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memmove(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_06_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_06_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_42.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_42_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_42_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = goodG2BSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_42.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_42_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_42_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = badSource(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = goodG2BSource(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_04_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15_bad()\n{\n  wchar_t *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_21.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_21_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_21_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  badStatic = 1;\n  data = badSource(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B1Static = 0;\n  data = goodG2B1Source(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B2Static = 1;\n  data = goodG2B2Source(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_02_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (0)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_02_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_02_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (0)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_08_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_08_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_badGlobal = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_badSource(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_goodG2B1Global = 0;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_goodG2B1Source(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_goodG2B2Global = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22_goodG2B2Source(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53d.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_15_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      memset(data, 'A', 100 - 1);\n      data[100 - 1] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (5)\n  {\n    case 6:\n      printLine(\"Benign, fixed string\");\n      break;\n\n    default:\n      memset(data, 'A', 50 - 1);\n      data[50 - 1] = '\\0';\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      memset(data, 'A', 50 - 1);\n      data[50 - 1] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_13_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_13_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_13_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54e.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54e.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            },
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "static void goodG2BSink(wchar_t *data)\n{\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (i = 0; i < 1; i++)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  int h;\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (h = 0; h < 1; h++)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_34_unionType myUnion;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char dest[50] = \"\";\n      memmove(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_34_unionType myUnion;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char dest[50] = \"\";\n      memmove(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_51b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_65b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17_bad()\n{\n  int i;\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (i = 0; i < 1; i++)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  int h;\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (h = 0; h < 1; h++)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_51b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_65b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_07_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61b_badSource(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61b_goodG2BSource(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_07_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_07_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_45_goodG2BData;\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54e.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_52c.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_05_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memmove(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memmove(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31_bad()\n{\n  wchar_t *data;\n  data = 0;\n  data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t source[100];\n      wmemset(source, L'C', 100 - 1);\n      source[100 - 1] = L'\\0';\n      memmove(data, source, 100 * (sizeof(wchar_t)));\n      data[100 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53d.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_41.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_03_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53d.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_52c.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_03_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_03_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_10_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61b_badSource(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61b_goodG2BSource(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_65b.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_10_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_10_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_51b.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n    break;\n  }\n\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n    break;\n  }\n\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_41.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61b_badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61b_goodG2BSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_12.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_12_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_12_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_31_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 100 - 1);\n  data[100 - 1] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t dest[50] = L\"\";\n      memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 50 - 1);\n  data[50 - 1] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t dest[50] = L\"\";\n      memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_18_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  memset(data, 'A', 100 - 1);\n\n  data[100 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  memset(data, 'A', 50 - 1);\n\n  data[50 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_31_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_31_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char dest[50] = \"\";\n      memcpy(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char dest[50] = \"\";\n      memcpy(dest, data, strlen(data) * (sizeof(char)));\n      dest[50 - 1] = '\\0';\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53d.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_14_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_52c.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_52c.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_14_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_14_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53d.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_52c.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_02_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (0)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54e.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_21.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_21_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_21_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  badStatic = 1;\n  data = badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B1Static = 0;\n  data = goodG2B1Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B2Static = 1;\n  data = goodG2B2Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_08_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  badStatic = 1;\n  data = badSource(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B1Static = 0;\n  data = goodG2B1Source(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B2Static = 1;\n  data = goodG2B2Source(data);\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13_bad()\n{\n  wchar_t *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_04_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memcpy(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54e.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memcpy(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_42.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_42_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_42_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = badSource(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = goodG2BSource(data);\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_51b.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_51b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_44.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_65b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_65b.c": {
        "error": "'<' not supported between instances of 'int' and 'NoneType'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17_bad",
                "description": "Reduce the number of bytes coppied in memmove (200 bytes to not be larger than the destination buffer 'data' (100 bytes)",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            },
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17_bad",
                "description": "Increase the size of the destination buffer in memmove (100 units of 1 bytes) to be able to hold coppied size 'data' (200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (wchar_t *) malloc(50 * (sizeof(wchar_t)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = L'\\0';\n  }\n\n  {\n    wchar_t source[100];\n    wmemset(source, L'C', 100 - 1);\n    source[100 - 1] = L'\\0';\n    memmove(data, source, 100 * (sizeof(wchar_t)));\n    data[100 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    memmove(dest, data, strlen(data) * (sizeof(char)));\n    dest[50 - 1] = '\\0';\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  memset(data, 'A', 100 - 1);\n\n  data[100 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  memset(data, 'A', 50 - 1);\n\n  data[50 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17_bad()\n{\n  int i;\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (i = 0; i < 1; i++)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  int h;\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (h = 0; h < 1; h++)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_10_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_10_bad()\n{\n  char *data;\n  data = 0;\n  if (globalTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_31_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_31_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      strcpy(data, source);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_65b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_16_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_16_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n    break;\n  }\n\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n    break;\n  }\n\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_51b.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_14_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_14_bad()\n{\n  char *data;\n  data = 0;\n  if (globalFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_13_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_13_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_42.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_42_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_42_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = badSource(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = goodG2BSource(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_06_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_06_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_09_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_09_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_04_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_04_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_03_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_03_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_08_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_08_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_07_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_07_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_02_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_02_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (0)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_52c.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_31_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_31_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 100 - 1);\n  data[100 - 1] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t dest[50] = L\"\";\n      memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 50 - 1);\n  data[50 - 1] = L'\\0';\n  {\n    wchar_t *dataCopy = data;\n    wchar_t *data = dataCopy;\n    {\n      wchar_t dest[50] = L\"\";\n      memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61b_badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61b_goodG2BSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_34_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_34_unionType myUnion;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char dest[50] = \"\";\n      strcpy(dest, data);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_34_unionType myUnion;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char dest[50] = \"\";\n      strcpy(dest, data);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_15_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_15_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      memset(data, 'A', 100 - 1);\n      data[100 - 1] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (5)\n  {\n    case 6:\n      printLine(\"Benign, fixed string\");\n      break;\n\n    default:\n      memset(data, 'A', 50 - 1);\n      data[50 - 1] = '\\0';\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      memset(data, 'A', 50 - 1);\n      data[50 - 1] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17_bad()\n{\n  int i;\n  char *data;\n  data = 0;\n  for (i = 0; i < 1; i++)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_10_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_10_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53d.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_badGlobal = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_badSource(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_goodG2B1Global = 0;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_goodG2B1Source(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_goodG2B2Global = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22_goodG2B2Source(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_05_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_05_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07_bad()\n{\n  char *data;\n  data = 0;\n  if (staticFive == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_44.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54e.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_41_goodG2BSink(char *data)\n{\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_21.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_21_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_21_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  badStatic = 1;\n  data = badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B1Static = 0;\n  data = goodG2B1Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B2Static = 1;\n  data = goodG2B2Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45_goodG2BData;\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_09_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_09_bad()\n{\n  char *data;\n  data = 0;\n  if (GLOBAL_CONST_TRUE)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_04_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_04_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_03_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_03_bad()\n{\n  char *data;\n  data = 0;\n  if (5 == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61b_badSource(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61b_goodG2BSource(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalTrue)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_15_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_15_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      wmemset(data, L'A', 100 - 1);\n      data[100 - 1] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (5)\n  {\n    case 6:\n      printLine(\"Benign, fixed string\");\n      break;\n\n    default:\n      wmemset(data, L'A', 50 - 1);\n      data[50 - 1] = L'\\0';\n      break;\n\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  switch (6)\n  {\n    case 6:\n      wmemset(data, L'A', 50 - 1);\n      data[50 - 1] = L'\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_18_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_18_bad()\n{\n  char *data;\n  data = 0;\n  goto source;\n  source:\n  data = (char *) malloc(50 * (sizeof(char)));\n\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_11_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_11_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrue())\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_16_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_16_bad()\n{\n  char *data;\n  data = 0;\n  while (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n    break;\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_14.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_14_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_14_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalFive == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_34_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_34_bad()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_34_unionType myUnion;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 100 - 1);\n  data[100 - 1] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t dest[50] = L\"\";\n      memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_34_unionType myUnion;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 50 - 1);\n  data[50 - 1] = L'\\0';\n  myUnion.unionFirst = data;\n  {\n    wchar_t *data = myUnion.unionSecond;\n    {\n      wchar_t dest[50] = L\"\";\n      memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n      dest[50 - 1] = L'\\0';\n      printWLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 100 - 1);\n  data[100 - 1] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char dest[50] = \"\";\n      strcpy(dest, data);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  memset(data, 'A', 50 - 1);\n  data[50 - 1] = '\\0';\n  {\n    char *dataCopy = data;\n    char *data = dataCopy;\n    {\n      char dest[50] = \"\";\n      strcpy(dest, data);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22a.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_badGlobal = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_goodG2B1Global = 0;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_goodG2B1Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_goodG2B2Global = 1;\n  data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22_goodG2B2Source(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_01_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_01_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 100 - 1);\n  data[100 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  wmemset(data, L'A', 50 - 1);\n  data[50 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 12
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_06_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_06_bad()\n{\n  char *data;\n  data = 0;\n  if (STATIC_CONST_FIVE == 5)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_04.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_04_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_04_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_TRUE)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  badStatic = 1;\n  data = badSource(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B1Static = 0;\n  data = goodG2B1Source(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goodG2B2Static = 1;\n  data = goodG2B2Source(data);\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 11
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2BSink()\n{\n  wchar_t *data = CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_45_goodG2BData;\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 7
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_41.c": {
        "error": "unsupported operand type(s) for *: 'NoneType' and 'int'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_44.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink(char *data)\n{\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 6
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_02_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_02_bad()\n{\n  char *data;\n  data = 0;\n  if (1)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_05_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_05_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFalse)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticTrue)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_08_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_08_bad()\n{\n  char *data;\n  data = 0;\n  if (staticReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_11.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_11_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_11_bad()\n{\n  char *data;\n  data = 0;\n  if (globalReturnsTrue())\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_13.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_13_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_13_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FIVE == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_16.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_16_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_16_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  while (1)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n    break;\n  }\n\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_34.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_34_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_34_bad()\n{\n  char *data;\n  CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_34_unionType myUnion;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  myUnion.unionFirst = data;\n  {\n    char *data = myUnion.unionSecond;\n    {\n      char source[100];\n      memset(source, 'C', 100 - 1);\n      source[100 - 1] = '\\0';\n      strcpy(data, source);\n      printLine(data);\n      free(data);\n    }\n  }\n}\n\n",
                "line": 18
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_12.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_12_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_12_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (globalReturnsTrueOrFalse())\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 21
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15_bad()\n{\n  char *data;\n  data = 0;\n  switch (6)\n  {\n    case 6:\n      data = (char *) malloc(50 * (sizeof(char)));\n      if (data == 0)\n    {\n      exit(-1);\n    }\n      data[0] = '\\0';\n      break;\n\n    default:\n      printLine(\"Benign, fixed string\");\n      break;\n\n  }\n\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 23
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_18.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_18_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_18_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  wmemset(data, L'A', 100 - 1);\n\n  data[100 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  goto source;\n  source:\n  wmemset(data, L'A', 50 - 1);\n\n  data[50 - 1] = L'\\0';\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_bad()\n{\n  int i;\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (i = 0; i < 1; i++)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B()\n{\n  int h;\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  for (h = 0; h < 1; h++)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 16
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_41.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_41_goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_41_goodG2BSink(char *data)\n{\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 8
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_02.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_02_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_02_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (0)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (1)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_05.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_05_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_05_bad()\n{\n  char *data;\n  data = 0;\n  if (staticTrue)\n  {\n    data = (char *) malloc(50 * (sizeof(char)));\n    if (data == 0)\n    {\n      exit(-1);\n    }\n    data[0] = '\\0';\n  }\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 17
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsFalse())\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticReturnsTrue())\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_07.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_07_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_07_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (staticFive == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_01.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_01_bad",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_01_bad()\n{\n  char *data;\n  data = 0;\n  data = (char *) malloc(50 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data[0] = '\\0';\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 14
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_03.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_03_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_03_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (5 == 5)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_06.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_06_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_06_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 100 - 1);\n    data[100 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B1()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE != 5)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B2()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (STATIC_CONST_FIVE == 5)\n  {\n    wmemset(data, L'A', 50 - 1);\n    data[50 - 1] = L'\\0';\n  }\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_09.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_09_bad",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_09_bad()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    memset(data, 'A', 100 - 1);\n    data[100 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            },
            {
                "function_name": "goodG2B1",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B1()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_FALSE)\n  {\n    printLine(\"Benign, fixed string\");\n  }\n  else\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 20
            },
            {
                "function_name": "goodG2B2",
                "description": "Increase the size of the destination buffer 'dest' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2B2()\n{\n  char *data;\n  data = (char *) malloc(100 * (sizeof(char)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  if (GLOBAL_CONST_TRUE)\n  {\n    memset(data, 'A', 50 - 1);\n    data[50 - 1] = '\\0';\n  }\n  {\n    char dest[50] = \"\";\n    strcpy(dest, data);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 15
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_42.c": {
        "suggestions": [
            {
                "function_name": "CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_42_bad",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "void CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_42_bad()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = badSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            },
            {
                "function_name": "goodG2B",
                "description": "Increase the size of the destination buffer 'dest' from 100 bytes to be at least 200 bytes",
                "code": "static void goodG2B()\n{\n  wchar_t *data;\n  data = (wchar_t *) malloc(100 * (sizeof(wchar_t)));\n  if (data == 0)\n  {\n    exit(-1);\n  }\n  data = goodG2BSource(data);\n  {\n    wchar_t dest[50] = L\"\";\n    memmove(dest, data, wcslen(data) * (sizeof(wchar_t)));\n    dest[50 - 1] = L'\\0';\n    printWLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 10
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45.c": {
        "suggestions": [
            {
                "function_name": "goodG2BSink",
                "description": "Increase the size of the destination buffer 'data' from 50 bytes to be at least 100 bytes",
                "code": "static void goodG2BSink()\n{\n  char *data = CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45_goodG2BData;\n  {\n    char source[100];\n    memset(source, 'C', 100 - 1);\n    source[100 - 1] = '\\0';\n    strcpy(data, source);\n    printLine(data);\n    free(data);\n  }\n}\n\n",
                "line": 9
            }
        ],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_21.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_64a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_13.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_66a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_17.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_52a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_51a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_44.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_13.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_65a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_67a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_03.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_64a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_09.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_63a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_31.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_51a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_07.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_09.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_03.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_61b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_31.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_10.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_68a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_14.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_10.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_14.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_10.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_04.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_03.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_13.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_44.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_09.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_17.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_21.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_07.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_14.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_04.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_68a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_42.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_34.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_11.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_52c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_22b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_34.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_01.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_61b.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_68a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_67b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_05.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_52b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_22b.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54c.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_65b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_51b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_63b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_45.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_41.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_16.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_06.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_67a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_12.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54e.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_52a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_66a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_63a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_18.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_02.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_45.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_08.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_61a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_68b.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_01.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_06.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_67a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_42.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_34.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_12.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_02.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_18.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_65a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_06.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_51a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_63a.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_16.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_05.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_52a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53d.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_22a.c": {
        "suggestions": [],
        "status": 200
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_02.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_08.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c": {
        "error": "'UnaryOp' object has no attribute 'name'",
        "status": 500
    },
    "/Users/danielverner/Programming/MSc_Thesis/python_c_ast/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_15.c": {
        "suggestions": [],
        "status": 200
    }
}